#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Apr 20, 2020 08:58:33 PM IST  platform: Windows NT

import sys
from tkinter.filedialog import askopenfilename 
import face_recognition as fr
import os
import cv2
import face_recognition
import numpy as np
from time import sleep
from PIL import Image
import pyttsx3


engine = pyttsx3.init('sapi5')

voices = engine.getProperty('voices')
engine.setProperty('voice', voices[len(voices)-1].id)


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import face_recog_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    face_recog_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    face_recog_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def speak(self,audio):
        print('Computer: ' + audio)
        engine.say(audio)
        engine.runAndWait()

    def addImage(self):
        file = askopenfilename(filetypes=[("Image File",'.jpg')])
        fnm=str(file).split("/")
        data = fr.load_image_file(file)
        pil=Image.fromarray(data)
        pil.save("./faces/"+fnm[-1])
        
        self.Notification = tk.Label(win)
        res="Image Uploaded and trained."
        self.Notification.configure(text=res, bg="SpringGreen3", width=50, font=('times', 18, 'bold'))
        self.Notification.place(relx=0.15, rely=0.756, height=56, width=402)

        
    def trainWindo(self):
        global unm,win
        win=tk.Tk();
        win.title("Train Your Module")
        win.geometry('580x320')
        win.configure(background='#0080ff')
        self.Label1 = tk.Label(win)
        self.Label1.place(relx=0.217, rely=0.022, height=66, width=352)
        self.Label1.configure(background="#0080ff")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=('times', 24, ' bold '))
        self.Label1.configure(foreground="#ffffff")
        self.Label1.configure(text='''Module Training''')
      
        self.Label2 = tk.Label(win)
        self.Label2.place(relx=0.083, rely=0.311, height=46, width=512)
        self.Label2.configure(background="#0080ff")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font=('times', 20, ' bold '))
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''Upload Image which having your name ..''')
        
        self.note = tk.Label(win)
        self.note.place(relx=0.083, rely=0.311, height=46, width=512)
        self.note.configure(activebackground="#f9f9f9")
        self.note.configure(activeforeground="black")
        self.note.configure(background="#0080ff")
        self.note.configure(disabledforeground="#a3a3a3")
        self.note.configure(font=('times', 20, ' bold '))
        self.note.configure(foreground="yellow")
        self.note.configure(highlightbackground="#d9d9d9")
        self.note.configure(highlightcolor="black")
        self.note.configure(text='''Note : Photo should be cleared and bright''')
        
        self.Label2 = tk.Label(win)
        self.Label2.place(relx=0.083, rely=0.2, height=46, width=500)
        self.Label2.configure(background="#0080ff")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font=('times', 20, ' bold '))
        self.Label2.configure(foreground="red")
        self.Label2.configure(text='''Upload Image which having your name ..''')

   
        self.upload = tk.Button(win)
        self.upload.place(relx=0.383, rely=0.467, height=43, width=226)
        self.upload.configure(activebackground="#ececec")
        self.upload.configure(activeforeground="#000000")
        self.upload.configure(background="#80ffff")
        self.upload.configure(disabledforeground="#a3a3a3")
        self.upload.configure(font=('times', 15, ' bold '))
        self.upload.configure(foreground="#000000")
        self.upload.configure(highlightbackground="#d9d9d9")
        self.upload.configure(highlightcolor="black")
        self.upload.configure(pady="0")
        self.upload.configure(text='''Upload''')
        self.upload.configure(command=self.addImage)
  
        self.Label2_1 = tk.Label(win)
        self.Label2_1.place(relx=0.05, rely=0.456, height=46, width=172)
        self.Label2_1.configure(activebackground="#f9f9f9")
        self.Label2_1.configure(activeforeground="black")
        self.Label2_1.configure(background="#0080ff")
        self.Label2_1.configure(disabledforeground="#a3a3a3")
        self.Label2_1.configure(font="-family {Sitka Display} -size 16 -weight bold")
        self.Label2_1.configure(foreground="#ffffff")
        self.Label2_1.configure(highlightbackground="#d9d9d9")
        self.Label2_1.configure(highlightcolor="black")
        self.Label2_1.configure(text='''Upload Image :''')
        
        
        
        
        
    def get_encoded_faces(self):
        """
        looks through the faces folder and encodes all
        the faces
    
        :return: dict of (name, image encoded)
        """
        encoded = {}
    
        for dirpath, dnames, fnames in os.walk("./faces"):
            for f in fnames:
                if f.endswith(".jpg") or f.endswith(".png"):
                    face = fr.load_image_file("faces/" + f)
                    encoding = fr.face_encodings(face)[0]
                    encoded[f.split(".")[0]] = encoding
        return encoded
    
                    
    def unknown_image_encoded(self,img):
        """
        encode a face given the file name
        """
        face = fr.load_image_file("faces/" + img)
        encoding = fr.face_encodings(face)[0]
    
        return encoding
    
    
    def classify_face(self):
        """
        will find all of the faces in a given image and label
        them if it knows what they are
    
        :param im: str of file path
        :return: list of face names
        """
        im=askopenfilename(filetypes=[("Image File",'.jpg')])
        faces = self.get_encoded_faces()
        faces_encoded = list(faces.values())
        known_face_names = list(faces.keys())
    
        img = cv2.imread(im, 1)
        
        img = cv2.resize(img, (0, 0), fx=0.2, fy=0.2)
        #img = img[:,:,::-1]
     
        face_locations = face_recognition.face_locations(img)
        unknown_face_encodings = face_recognition.face_encodings(img, face_locations)
    
        face_names = []
        for face_encoding in unknown_face_encodings:
            # See if the face is a match for the known face(s)
            matches = face_recognition.compare_faces(faces_encoded, face_encoding)
            name = "Unknown"
    
            # use the known face with the smallest distance to the new face
            face_distances = face_recognition.face_distance(faces_encoded, face_encoding)
            best_match_index = np.argmin(face_distances)
            if matches[best_match_index]:
                name = known_face_names[best_match_index]
    
            face_names.append(name)
    
            for (top, right, bottom, left), name in zip(face_locations, face_names):
                # Draw a box around the face
                cv2.rectangle(img, (left-20, top-20), (right+20, bottom+20), (255, 0, 0), 2)
    
                # Draw a label with a name below the face
                cv2.rectangle(img, (left-20, bottom -15), (right+20, bottom+20), (255, 0, 0), cv2.FILLED)
                font = cv2.FONT_HERSHEY_DUPLEX
                cv2.putText(img, name, (left -20, bottom + 15), font, 1.0, (255, 255, 255), 2)
                
        self.speak("Sir ")
        for fnm in face_names:
            self.speak(fnm)
        self.speak("Found in this image")


    # Display the resulting image
        while True:
    
            cv2.imshow('Video', img)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                return face_names 

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font10 = "-family {Segoe UI Black} -size 24 -weight bold"
        font9 = "-family {Stencil Std} -size 24 -weight bold"

        top.geometry("916x549+281+124")
        top.minsize(148, 1)
        top.maxsize(1924, 1055)
        top.resizable(1, 1)
        top.title("Face Recognition")
        top.configure(background="#0080ff")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.197, rely=0.036, height=56, width=534)
        self.Label1.configure(background="#0080ff")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font9)
        self.Label1.configure(foreground="#ffffff")
        self.Label1.configure(text='''Face Recognition''')

        self.AddImage = tk.Button(top)
        self.AddImage.place(relx=0.328, rely=0.182, height=143, width=306)
        self.AddImage.configure(activebackground="#ececec")
        self.AddImage.configure(activeforeground="#000000")
        self.AddImage.configure(background="#80ffff")
        self.AddImage.configure(disabledforeground="#a3a3a3")
        self.AddImage.configure(font=font10)
        self.AddImage.configure(foreground="#000000")
        self.AddImage.configure(highlightbackground="#d9d9d9")
        self.AddImage.configure(highlightcolor="black")
        self.AddImage.configure(pady="0")
        self.AddImage.configure(text='''Training''')
        self.AddImage.configure(command=self.trainWindo)

        self.Scan = tk.Button(top)
        self.Scan.place(relx=0.328, rely=0.492, height=143, width=306)
        self.Scan.configure(activebackground="#ececec")
        self.Scan.configure(activeforeground="#000000")
        self.Scan.configure(background="#80ffff")
        self.Scan.configure(disabledforeground="#a3a3a3")
        self.Scan.configure(font="-family {Segoe UI Black} -size 24 -weight bold")
        self.Scan.configure(foreground="#000000")
        self.Scan.configure(highlightbackground="#d9d9d9")
        self.Scan.configure(highlightcolor="black")
        self.Scan.configure(pady="0")
        self.Scan.configure(text='''Scan Image''')
        self.Scan.configure(command=self.classify_face)

if __name__ == '__main__':
    vp_start_gui()





